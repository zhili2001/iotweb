import{_ as $,u as q,a as w,r as g,p as A,l as E,q as Q,c,w as S,b as r,v as k,F as T,d as M,m as P,o as i,t as v,s as U}from"./index-BUOmST_B.js";import{m as B}from"./mqtt.esm-B6YgMEGc.js";const I={key:0,class:"password-prompt"},J={key:1,class:"monitor-container"},j={class:"gateway-header"},F={class:"controller-grid"},z={class:"controller-header"},L={class:"controller-label"},G={class:"current-value"},H={class:"controller-control"},K=["onUpdate:modelValue","placeholder"],R=["onClick","disabled"],W={__name:"DeviceControl",setup(X){const _=q(),u=w({}),l=g(""),h=g(!0),d=w({}),m=g("");let n=null;const V=A(()=>Object.entries(u).map(([o,t])=>({mac:o,alias:t.mac_alias||o,online:t.is_online,controllers:t.keys.filter(e=>parseInt(e.device_type)===2).map(e=>({key:e.mac_key,alias:e.key_alias||e.mac_key,value:e.value||"N/A",range:e.range||"0-100"}))}))),N=async()=>{try{const o=await P.get("/api/iot/devices",{params:{userId:_.userId}});Object.entries(o.data).forEach(([t,e])=>{try{const s=JSON.parse(e.msg||"{}").msg||{};e.keys.forEach(a=>{a.value=s[a.mac_key]||"N/A",d[a.mac_key]=a.value})}catch(s){console.error("设备消息解析失败:",s)}u[t]={...e,rawMac:t}})}catch(o){console.error("获取设备失败:",o)}},x=(o,t)=>{const e=u[o];if(!e){console.warn(`未注册设备: ${o}`);return}e.keys.forEach(s=>{const a=t[s.mac_key];(s.device_type===1||s.device_type===2)&&a!==void 0&&(s.value=a)})},C=async()=>{if(!(n!=null&&n.connected))try{const o=await P.post("/api/iot/get_topic",{username:_.username,password:l.value});m.value=o.data.topic,n=B.connect("ws://lichen129.icu:8083/mqtt",{clientId:"11111111111111111",username:_.username,password:l.value,protocolVersion:5}),n.on("connect",()=>{console.log("MQTT 连接成功"),n.subscribe(m.value,{qos:0,nl:!0},t=>{t?console.error("订阅失败:",t):console.log("订阅成功:",m.value)})}),n.on("message",(t,e)=>{try{const s=e.toString(),a=s.match(/^\[([^\]]+)\]/);if(!a){console.error("消息缺少 MAC 标识:",s);return}const p=a[1],f=JSON.parse(s.replace(/^\[[^\]]+\]/,""));console.log("[MQTT消息]",f),x(p,f.msg)}catch(s){console.error("消息解析失败:",s)}})}catch(o){throw console.error("MQTT 初始化失败:",o),o}},D=(o,t)=>{if(!(n!=null&&n.connected)){alert("MQTT连接堵塞，请重试！");return}const e=d[t];if(e==null){alert("请输入有效值");return}const s=JSON.stringify({msg:{[t]:e.toString()}}),a=`[${o}]${s}`;n.publish(m.value,a,p=>{if(p)console.error("发送失败:",p),alert("指令发送失败");else{console.log("指令已发送:",a);const b=u[o].keys.find(O=>O.mac_key===t);b&&(b.value=e)}})},y=async()=>{try{await C(),h.value=!1,sessionStorage.setItem("mqttPassword",l.value),N()}catch{h.value=!0,sessionStorage.removeItem("mqttPassword")}};return E(()=>{const o=sessionStorage.getItem("mqttPassword");o&&(l.value=o,y())}),Q(()=>{n==null||n.end(!0)}),(o,t)=>h.value?(i(),c("div",I,[S(r("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>l.value=e),type:"password",placeholder:"请输入密码"},null,512),[[k,l.value]]),r("button",{onClick:y},"提交")])):(i(),c("div",J,[(i(!0),c(T,null,M(V.value,e=>(i(),c("div",{key:e.mac,class:"gateway-card"},[r("div",j,[r("h3",null,v(e.alias),1),r("span",{class:U(["status",e.online?"online":"offline"])},v(e.online?"在线":"离线"),3)]),r("div",F,[(i(!0),c(T,null,M(e.controllers,s=>(i(),c("div",{key:s.key,class:"controller-item"},[r("div",z,[r("span",L,v(s.alias),1),r("span",G,"当前值: "+v(s.value),1)]),r("div",H,[S(r("input",{"onUpdate:modelValue":a=>d[s.key]=a,type:"number",placeholder:`输入新值 (${s.range})`},null,8,K),[[k,d[s.key],void 0,{number:!0}]]),r("button",{onClick:a=>D(e.mac,s.key),disabled:!e.online}," 发送 ",8,R)])]))),128))]),t[1]||(t[1]=r("div",{class:"control-section"},null,-1))]))),128))]))}},ee=$(W,[["__scopeId","data-v-29bc53ac"]]);export{ee as default};
